// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFishermanID = accounts[1]
    const originCoastLocation = "-38.239770 and 144.341490"
    var tunaNotes = ""
    var tunaPrice = web3.utils.toWei("0", "ether")
    var tunaState = 0
    const regulatorID = accounts[2]
    var auditStatus = ""
    const restaurantID = accounts[3]
    const emptyAddress = '0x0000000000000000000000000000000000000000'

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Fisherman: accounts[1] ", accounts[1])
    console.log("Regulator: accounts[2] ", accounts[2])
    console.log("Restaurant: accounts[3] ", accounts[3])
    
    // 1st Test
    it("Testing smart contract function catchTuna() that allows a Fisherman to catch Tuna", async() => {
        const supplyChain = await SupplyChain.deployed()
       
        // Mark an item as Caught by calling function catchTuna()
        await supplyChain.addFisherman(accounts[1], {from: accounts[1]})
        await supplyChain.catchTuna(upc, originFishermanID, originCoastLocation, {from: accounts[1]})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.queryTuna(upc, {from: accounts[1]})
        
        // Verify the result set
        assert.equal(resultBufferOne[0], originFishermanID, 'Error: Invalid owner ID')
        assert.equal(resultBufferOne[1], originCoastLocation, 'Error: Invalid Coast location')
        assert.equal(resultBufferOne[2], tunaNotes, 'Error: Invalid Tuna Notes')
        assert.equal(resultBufferOne[3], tunaPrice, 'Error: Invalid price')
        assert.equal(resultBufferOne[4], 0, 'Error: Invalid State')
        assert.equal(resultBufferOne[5], emptyAddress, 'Error: Invalid Regulator ID')
        assert.equal(resultBufferOne[6], auditStatus, 'Error: Invalid audit status')
    })    

    
    // 2nd Test
    it("Testing smart contract function recordTuna() that allows a Fisherman to record Tuna Fish details", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Record Tuna details by calling function recordTuna()
        tunaNotes = "Test Tuna Fish Notes"
        tunaPrice = web3.utils.toWei("10", "ether")
        await supplyChain.recordTuna(upc, tunaPrice, tunaNotes, {from: accounts[1]})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.queryTuna.call(upc, {from: accounts[1]})
        
        // Verify the result set
        assert.equal(resultBufferOne[2], tunaNotes, 'Error: Invalid Tuna Notes')
        assert.equal(resultBufferOne[3], tunaPrice, 'Error: Invalid price')
        assert.equal(resultBufferOne[4], 1, 'Error: Invalid State')
    })

    // 3rd Test
    it("Testing smart contract function auditTuna() that allows a Regulator to record Tuna Fish audit details", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Record Tuna details by calling function recordTuna()
        auditStatus = "Passed"
        await supplyChain.addRegulator(accounts[2], {from: accounts[2]})
        await supplyChain.auditTuna(upc, auditStatus, {from: accounts[2]})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.queryTuna.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferOne[5], regulatorID, 'Error: Invalid Regulator ID')
        assert.equal(resultBufferOne[6], auditStatus, 'Error: Invalid audit status')
    })

    // 4th Test
    it("Testing smart contract function buyTuna() that allows a Restaurant to buy Tuna Fish", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        let price =  web3.utils.toWei("10", "ether")
        // Buy Tuna Fish by calling function buyTuna()
        await supplyChain.addRestaurant(accounts[3], {from: accounts[3]})
        await supplyChain.buyTuna(upc, price, {from: accounts[3], value: price})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.queryTuna.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferOne[0], restaurantID, 'Error: Invalid Restaurant ID')
        assert.equal(resultBufferOne[4], 3, 'Error: Invalid Tuna status')
    })
});

